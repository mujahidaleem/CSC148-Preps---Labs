def createPrimes(n):
    '''Generates primes less than or equal to the number'''
    primes = list(range(2, n+1))
    for i in primes:
        j=2
        while i*j<= primes[-1]:
            if i*j in primes:
                primes.remove(i*j)
            j=j+1
    print(primes)
    return primes

def odd_primes(N):
    '''We want all primes which are not equal to two'''
    oddprimes = createPrimes(N)
    oddprimes.remove(2)
    return(oddprimes)

def goldbach(N):
    x, y = 0, 0
    result = 0
    #Iterate through an odd primes list and then try to add them up...
    if N % 2 == 0:
        primes = odd_primes(N) #Create odd primes
        while result != N:

            for i in range(len(primes)): #One iterator
                if result == N: break
                x = primes[i]

                for j in range(len(primes)): #Second iterator
                    y = primes[j]
                    result = x + y
                    if result == N: break
    return x, y

'''
number = int(input('Pick an even number!'))
print(goldbach(number))
'''

def encrypt(number):

encrypt(1923)
